"use client"

import { useEffect, useRef } from 'react'
import { useChat } from '@/lib/chat-context'
import { ScrollArea } from './ui/scroll-area'
import { Input } from './ui/input'
import { Button } from './ui/button'
import { useForm } from 'react-hook-form'

interface MessageViewProps {
  conversation: {
    id: string
    participantId: string
    messages: Array<{
      id: string
      senderId: string
      content: string
      timestamp: Date
      read: boolean
    }>
  }
}

interface MessageFormData {
  message: string
}

export function MessageView({ conversation }: MessageViewProps) {
  const { sendMessage, markAsRead } = useChat()
  const scrollRef = useRef<HTMLDivElement>(null)
  const { register, handleSubmit, reset } = useForm<MessageFormData>()

  useEffect(() => {
    // Mark messages as read when conversation is viewed
    markAsRead(conversation.id)
  }, [conversation.id, markAsRead])

  useEffect(() => {
    // Scroll to bottom when new messages arrive
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight
    }
  }, [conversation.messages])

  const onSubmit = handleSubmit((data) => {
    if (data.message.trim()) {
      sendMessage(data.message.trim())
      reset()
    }
  })

  return (
    <div className="flex flex-col h-full">
      <ScrollArea ref={scrollRef} className="flex-1 p-4">
        <div className="space-y-4">
          {conversation.messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${
                message.senderId === 'currentUser' ? 'justify-end' : 'justify-start'
              }`}
            >
              <div
                className={`max-w-[70%] rounded-lg p-3 ${
                  message.senderId === 'currentUser'
                    ? 'bg-primary text-primary-foreground'
                    : 'bg-muted'
                }`}
              >
                <p className="text-sm">{message.content}</p>
                <span className="text-xs opacity-70">
                  {new Date(message.timestamp).toLocaleTimeString([], {
                    hour: '2-digit',
                    minute: '2-digit',
                  })}
                </span>
              </div>
            </div>
          ))}
        </div>
      </ScrollArea>

      <form onSubmit={onSubmit} className="p-4 border-t">
        <div className="flex gap-2">
          <Input
            {...register('message')}
            placeholder="Type a message..."
            className="flex-1"
          />
          <Button type="submit">Send</Button>
        </div>
      </form>
    </div>
  )
}